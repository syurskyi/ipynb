#!/usr/bin/python
# -*- coding: utf-8 -*-

# Create set
# s
# print(_)

print()
# ######################################################################################################################
# Преобразуем строку in set
# print _ string

print()
# ######################################################################################################################
# Преобразуем список in set
# print_ 1, 2, 3, 4, 5

print()
# ######################################################################################################################
# Преобразуем кортеж in set
# print __1, 2, 3, 4, 5

print()
# ######################################################################################################################
# Остаются только уникальные элементы
# print __1, 2, 3, 1, 2, 3

print()
# ######################################################################################################################
# len()
# print(_(___1 2 3

print()
# ######################################################################################################################
# union()
s = set([1, 2, 3])
# print(_._(_ __4, 5, 6___, _ _ __ __4, 5, 6___

print()
# ######################################################################################################################
# update()
s = set([1, 2, 3])
# _._(_ __4 5 6___
# print(_)

print()
# ######################################################################################################################
# difference()
# print(__ __1 2 3__ _ _ __1 2 4___

# s = set([1, 2, 3])
# print(_._(_ __1 2 4____

print()
# ######################################################################################################################
# intersection()
s = set([1, 2, 3])
# print(_ __1 2 3__ _ _ __1 2 4___

s = set([1, 2, 3])
# print(_._(_ __1 2 4_____

print()
# ######################################################################################################################
# symmetric_difference
s = set([1, 2, 3])
# print(_ _ _ __1 2 4__, _._(_ __1 2 4____

print()
# ######################################################################################################################
# in
s = set([1, 2, 3, 4, 5])
# print(1 , 12)

# x in s
s = set([1, 2, 3, 4, 5])
# print(1 , 12)

# x not in s

print()
# ######################################################################################################################
# ==
# print(set([1, 2, 3]) == set([1, 2, 3]))
# True
# print(set([1, 2, 3]) == set([3, 2, 1]))
# True
# print(set([1, 2, 3]) == set([1, 2, 3, 4]))
# False

print()
# ######################################################################################################################
# issubset or <=
s = set([1, 2, 3])
# print(s __ _([1, 2]), s __ _([1, 2, 3, 4]))

# print(s._(_([1, 2])), s._(_([1, 2, 3, 4])))

print()
# ######################################################################################################################
# issuperset or =>
s = set([1, 2, 3])
# print(s _ _([1, 2]), s _ _([1, 2, 3, 4]))
# print(s._(_([1, 2])), s._(_([1, 2, 3, 4])))
# (True, False)

print()
# ######################################################################################################################
# isdisjoint()
s = set([1, 2, 3])
# print(s._(_([4, 5, 6])))
# print(s._(_([1, 3, 5])))

print()
# ######################################################################################################################
# Creating Sets
# s = a 100 (1 2)
# _(s)

print()
# ######################################################################################################################
# create an empty set
# s
# _(_)

print()
# ######################################################################################################################
# Adding Elements
s = {30, 20, 10}
# 15

print()
# ######################################################################################################################
# Removing Elements
s = {1, 2, 3}
# 1
# 10 error
# # # # If we don't want the exception we can do it this way:
# 10

print()
# ######################################################################################################################
# pop()
s = set('python')
# print(_)
#
# print(_)

print()
# ######################################################################################################################
# clear()
s = {1, 2, 3}
#
# print(_)

print()
# ######################################################################################################################
# Set Operations
# Intersections
s1 = {1, 2, 3}
s2 = {2, 3, 4}
# s1._(_)
# s1 _ s2

print()
# ######################################################################################################################
# Set Operations
# Unions
s1 = {1, 2, 3}
s2 = {3, 4, 5}
# s1._(_)
# s1 _ s2

print()
# ######################################################################################################################
# Set Operations
# Disjointedness
s1 = {1, 2, 3}
s2 = {2, 3, 4}
s3 = {30, 40, 50}
# print(s1._(_))
# print(s2._(_))

# # # # Of course we could use the cardinality of the intersection instead:
# print _(s1 _ s2)
# print_(s2 _ s3)

# # # # we can also use the associated truth value:
# _ {1, 2} _ {2, 3}:
#     print('sets are not disjoint')

# _ _ {1, 2} _ {3, 4}:
#     print('sets are disjoint')

print()
# ######################################################################################################################
# Set Operations
# Differences

s1 = {1, 2, 3, 4, 5}
s2 = {4, 5}
# s1 _ s2
# s1._(_)

print()
# ######################################################################################################################
# Set Operations
# Symmetric Difference
s1 = {1, 2, 3, 4, 5}
s2 = {4, 5, 6, 7, 8}
# s1._(_)
# s1 _ s2
# Remember that the symmetric difference of two sets results in the difference of the union and the intersection
# of the two sets:
# (s1 _ s2) _ (s1 _ s2)

print()
# ######################################################################################################################
# Set Operations
# Subsets and Supersets

s1 = {1, 2, 3}
s2 = {1, 2, 3}
s3 = {1, 2, 3, 4}
s4 = {10, 20, 30}
# s1._(_)
# s1 _ s2
#  # # # For strict containment there is no set method - we have to use the operator, or a combination of methods/operators:
# s1 _ s2
# s1._(_) _ s1 _ s2
# s1 _ s3
# s1 _ s4
# # # # An analogous situation with supersets:
# s2 _ s1
# s2 _ s1

print()
# ######################################################################################################################
# Union Updates
s1 = {1, 2, 3}
s2 = {4, 5, 6}
# print(_(_))
# s1 _ s2
# print(_, _(_))

s1 = {1, 2, 3}
s2 = {4, 5, 6}
# print(_(_))
# s1._(_)
# print(_, _(_))

print()
# ######################################################################################################################
# Intersection Updates
s1 = {1, 2, 3}
s2 = {2, 3, 4}
# print(_(_))
# s1 _ s2
# print(_, _(_))

s1 = {1, 2, 3}
s2 = {2, 3, 4}
# print(_(_))
# s1._(_)
# print(_, _(_))

print()
# ######################################################################################################################
# Difference Updates
s1 = {1, 2, 3, 4}
s2 = {2, 3}
# print(_(_))
# s1 _ s2
# print(_, _(_))

s1 = {1, 2, 3, 4}
s2 = {2, 3}
# print(_(_))
# s1._(_)
# print(_, _(_))

print()
# ######################################################################################################################
# Symmetric Difference Update
s1 = {1, 2, 3, 4, 5}
s2 = {4, 5, 6, 7}
# s1 _ s2
# s1._(_)

print()
# ######################################################################################################################
# Пустое множество
# empty_set
# print(_)

print()
# ######################################################################################################################
# Пустое неизменяемое множество
# empty_frozenset
# print(_)

print()
# ######################################################################################################################
# Создание множеств из итерабельых объектов
# my_frozenset = f_([4, 1, 3, 8])
# my_set = _(_)
# print(_)
# print(_)

print()
# ######################################################################################################################
# set_comprehensions

# number_set = {i + j _ _ _ _(10) _ j _ _(5)}
# print(_)

# char_set = {x _ x _ 'abracadabra' _ x _ _ 'abc'}
# print(_)

print()
# ######################################################################################################################
# Количество элементов множества
my_set = {4, 5, 1, 2}
# print('len({}) = {}'._(_), _(_)

print()
# ######################################################################################################################
# Проверка вхождения элемента
my_set = {4, 5, 1, 2}
# print(4 _ _)
# print(3 _ _ _)
# print(9 i_ _)

print()
# ######################################################################################################################
# Пересекаются ли множества
# print({3, 4, 5}._({8, 1, 0}))
# print({3, 4, 5}._({1, 2, 3}))

print()
# ######################################################################################################################
# Проверка включения одного множества в другое
# print({1, 7, 9}._({1, 2, 3, 7, 9}))
# print({1, 7, 9} _ {1, 2, 3, 7, 9})
# print({1, 7, 9, 2, 3} _ {1, 2, 3, 7, 9})

print()
# ######################################################################################################################
# Проверка строгого включения
# print({1, 7, 9} _ {1, 2, 3, 7, 9})
# print({1, 7, 9, 2, 3} _ {1, 2, 3, 7, 9})

print()
# ######################################################################################################################
# Проверка включения одного множества в другое
# print({1, 2, 3, 4}._({1, 2}))
# print({1, 2, 4, 4} _ {1, 2})
# print({1, 2, 3, 4} _ {1, 2, 3, 4})

print()
# ######################################################################################################################
# Проверка строгого включения
# print({1, 2, 4, 4} _ {1, 2})
# print({1, 2, 3, 4} _ {1, 2, 3, 4})

print()
# ######################################################################################################################
# Объединение множеств
# print({1, 3}._({2, 3, 4}))
# print({1, 3} _ {2, 3, 4})

print()
# ######################################################################################################################
# Пересечение множеств
# print({1, 3}._({2, 3, 4}))
# print({1, 3} _ {2, 3, 4})

print()
# ######################################################################################################################
# Разница множеств
# print({1, 2, 3, 4}._({3, 4, 5}))
# print({1, 2, 3, 4} _ {3, 4, 5})

print()
# ######################################################################################################################
# Симметрическая разница
# print({1, 2, 3, 4}._({3, 4, 5, 6}))
# print({1, 2, 3, 4} _ {3, 4, 5, 6})

print()
# ######################################################################################################################
# Копирование множества

# my_set _(chars)
# copy _._
# print(_)

print()
# ######################################################################################################################
# difference_between_methods_and_operations

# print(f_(abc)._(f_(cdef)))  # корректно
# print(_(abc) _ _(cdef))  # корректно
# print(_(abc)._(cdef))  # корректно

print()
# ######################################################################################################################
# set_equality

# print({1, 2, 3} == f_([1, 2, 3]))
# print(s_(abc) == f_(abc))
# print(_(abc) _ _([f_(abc)]))
