#!/usr/bin/python
# -*- coding: utf-8 -*-

# Создаем список
# arr

print()
# ######################################################################################################################
# Создаем пустой список
#

print()
# ######################################################################################################################
# Получаем элемент по индексу
arr = [1, 2, 3]
# print(_)

print()
# ######################################################################################################################
# Изменяем элемент по индексу
arr = [1, 2, 3]
# 50

print()
# ######################################################################################################################
# Преобразуем строку в список
# print _String

print()
# ######################################################################################################################
# Преобразуем кортеж в список
# print(_ 1, 2, 3, 4, 5

print()
# ######################################################################################################################
# Создаем пустой список, Добавляем элемент1, Добавляем элемент2
# arr
_._(1)
# _._ str
# print(_)

print()
# ######################################################################################################################
# Создавать вложенные списки следует с помощью метода append ( ) внутри цикла:
# Можно также воспользоваться генераторами списков:
# arr
# _ i _ _ 2
#   _._
# print(_)

# _0._5
# print(arr)

# arr = [ __ _ _ _ __2
# print(_)

# _0._5; print(_)

print()
# ######################################################################################################################
# Create a shallow copy of the list
x = [1, 2, 3, 4, 5]
# #  Создаем копию списка
# y _
# # или с помощью среза
# y _

# or
# Создали вложенный список
x = [1, [2, 3, 4, 5]]
# y
# print(x _ y)  # # Разные объекты
# y[1][1] = 100 # Изменяем элемент
# print(x, y) # Изменение затронуло переменную x!!!

print()
# ######################################################################################################################
# import
# Create a full copy of the list
x = [1, [2, 3, 4, 5]]
# #  create deep copy y
# y
# #  change element
# 1 1 100
# #  print
# print(_, _)

# # second example
x = [1, 2]
y = [x, x]
# print(_)
# # #  create deep copy z
# z
# print(z[0] _ x, z[1] _ x, z[0] _ z[1])
# # # Изменили один элемент
# z 0 0 300
# # # Значение изменилось сразу в двух элементах!
print(_)
# # # Начальный список не изменился
# print(x)

print()
# ######################################################################################################################
# Позиционное присваивание
x, y, z = [1, 2, 3]

print()
# ######################################################################################################################
# В Python 3 при позиционном присваивании перед одной из переменных слева от оператора
# = можно указать звездочку.

# x, y, *z = 1 2 3
# print(x, y, z)
# x, y, *z = 1 2 3 4 5
# print(x, y, z)
# x, y, *z = 1 2
# print(x, y, z)
# *x, y, z = 1 2
# print(x, y, z)
# x, *y, z = 1 2 3 4 5
# print(x, y, z)
# *z, = 1 2 3 4 5
# print(z)
# [1, 2, 3, 4, 5]

print()
# ######################################################################################################################
# Получаем количество элементов
arr = [1, 2, 3, 4, 5]
print(_(_))

print()
# ######################################################################################################################
# Получаем последний элемент
arr = [1, 2, 3, 4, 5]
# print(_[_(_)-1])

print()
# ######################################################################################################################
# Обращение к последнему элементу
arr = [1, 2, 3, 4, 5]
# print(__-__, _[_(_)-1])

print()
# ######################################################################################################################
# Изменение элемента по индексу
arr = [1, 2, 3, 4, 5]
# 600
# print(_)

print()
# ######################################################################################################################
# выведем символы в обратном порядке
arr = [1, 2, 3, 4, 5]
# print(____)

print()
# ######################################################################################################################
# выведем символы Без первого элемента
arr = [1, 2, 3, 4, 5]
# print(_)

print()
# ######################################################################################################################
# выведем символы Без последнего элемента
arr = [1, 2, 3, 4, 5]
# print(_)

print()
# ######################################################################################################################
# Получим первые два элемента списка
arr = [1, 2, 3, 4, 5]
# print(_)

print()
# ######################################################################################################################
# Последний элемент списка
arr = [1, 2, 3, 4, 5]
# print(_)

print()
# ######################################################################################################################
# выведем фрагмент от второго элемента до четвертого включительно:
arr = [1, 2, 3, 4, 5]
# print(_)

print()
# ######################################################################################################################
# Изменяем значения элементов с индексами 1 и 2
arr = [1, 2, 3, 4, 5]
# _____ = 6 7
# print(_)

print()
# ######################################################################################################################
# Удаляем элементы с индексами 1 и 2
arr = [1, 2, 3, 4, 5]
# ____ =
print(_)

print()
# ######################################################################################################################
# два списка в один список позволяет оператор+
arr1 = [1, 2, 3, 4, 5]
arr2 = [6, 7, 8, 9]
# arr3
# print(_)

arr = [1, 2, 3, 4, 5]
# 6, 7, 8, 9
# print(_)

print()
# ######################################################################################################################
# Операция повторения
# print 1, 2, 3  3

print()
# ######################################################################################################################
# Проверка на вхождение
# print(2 _ _1 2 3 4 5, 6 _ _1 2 3 4 5__

print()
# ######################################################################################################################
# Создать вложенный cписок
arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# or
arr = [
              [1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]
          ]

print()
# ######################################################################################################################
# получить значение элемента во вложенном списке
arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# print(__1__1_)

print()
# ######################################################################################################################
# Перебрать все элементы списка можно с помощью цикла for:
arr = [1, 2, 3, 4, 5]
# i _ __
#     print(__ _____)
# print(_)

print()
# ######################################################################################################################
# переmенную i внутри цикла можно изменить, но если она ссылается
# на неизменяемый тип данных (например, число или строку), то это не отразится на исходном списке:
arr = [1, 2, 3, 4]
# # # Элементы имеют неизменяемый тип (число)
# i _ _
# 10
# # # ## Список не изменился
# print(_)
# # # # Элементы имеют изменяемый тип (список)
arr = [[1, 2], [3, 4]]
# i _ _
# 10
# # # ## # # Список изменился
# print(_)

print()
# ######################################################################################################################
# append()

arr = [1, 2, 3]
# # # # Добавляем число
# 4
print(_)
# # # # Добавляем список
# 5 6
# print(_)
# # # # Добавляем кортеж
# 7 8
# print(_)

print()
# ######################################################################################################################
# ехtеnd()

arr = [1, 2, 3]
# # # # Добавляем список
# 4 5 6
# # # # Добавляем кортеж
# 7 8 9
# # # # Добавляем буквы из строки
# abc
# print(_)

print()
# ######################################################################################################################
# Добавить несколько элементов можно с помощью операции конкатенации или оператора+=:
arr = [1, 2, 3]

# воспользоваться операцией присваивания значения срезу:
arr = [1, 2, 3]

# insert()
arr = [1, 2, 3]
# # # Вставляем 0 в начало списка

# # # Можно указать отрицательные числа

# # # Вставляем 100 в позицию 2

# # # Добавляем список

# Метод insert () позволяет добавить только один объект. Чтобы добавить несколько объектов,
# можно воспользоваться операцией присваивания значения срезу. Добавим несколько
# элементов в начало списка:
arr = [1, 2, 3]

print()
# ######################################################################################################################
# рор ( [ <Индекс> ] )
arr = [1, 2, 3, 4, 5]
# # # Удаляем последний элемент списка

# # # Список изменился

# # # Удаляем первый элемент списка

# # # Список изменился

print()
# ######################################################################################################################
# del()
arr = [1, 2, 3, 4, 5]
# # # Удаляем последний элемент спискa

# # # Удаляем первый и второй элементы

print()
# ######################################################################################################################
# remove (<Значение>)
arr = [1, 2, 3, 1, 1]

print()
# ######################################################################################################################
# clear ()
arr = [1, 2, 3, 1, 1]

print()
# ######################################################################################################################
# Если необходимо удалить все повторяюшиеся элементы списка, то можно преобразовать список во множество,
# а затем множество обратно преобразовать в список. Обратите внимание на то, что список должен содержать
# только неизменяемые объекты (например, числа, строки или кортежи).
# В противном случае возбуждается искmочение TypeError.
arr = [1, 2, 3, 1, 1, 2, 2, 3, 3]

# # # Преобразуем список во множество

# # # Преобразуем множество в список

# # # Все повторы были удалены

print()
# ######################################################################################################################
# Проверка на вхождение

print()
# ######################################################################################################################
# Проверка на невхождение

print()
# ######################################################################################################################
# index
arr = [1, 2, 1, 2, 1]

print()
# ######################################################################################################################
# count
arr = [1, 2, 1, 2, 1]

print()
# ######################################################################################################################
# max () и min ()
arr = [1, 2, 3, 4, 5]

print()
# ######################################################################################################################
# reverse()
arr = [1, 2, 3, 4, 5]

print()
# ######################################################################################################################
# rеvеrsеd()
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# # # Использование функции list()

# # # Вывод с помощью цикла

# # # Использование генератора списков

print()
# ######################################################################################################################
# shuffle
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print()
# ######################################################################################################################
# choice

print()
# ######################################################################################################################
# sample
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print()
# ######################################################################################################################
# sort( )
arr = [2, 7, 10, 4, 6, 8, 9, 3, 1, 5]

print()
# ######################################################################################################################
# Standard sorting
arr = ["единица1", "Единый", "Единица2"]

print()
# ######################################################################################################################
# Custom sorting,  # Указываем метод
arr = ["единица1", "Единый", "Единица2"]

print()
# ######################################################################################################################
# join()
arr = ["word1", "word2", "word3"]
arr = ["word1", "word2", "word3", 2]

print()
# ######################################################################################################################
# Index assignment
L = ['spam', 'Spam', 'SPAM!']

print()
# ######################################################################################################################
# Slice assignment: delete+insert
L = ['spam', 'Spam', 'SPAM!']

print()
# ######################################################################################################################
# Append method call: add item at end
L = ['spam', 'Spam', 'SPAM!']

print()
# ######################################################################################################################
# Sort list items
L = ['spam', 'Spam', 'SPAM!']

print()
# ######################################################################################################################
# Sort with mixed case
L = ['abc', 'ABD', 'aBe']

print()
# ######################################################################################################################
# sort() Normalize to lowercase
L = ['abc', 'ABD', 'aBe']

print()
# ######################################################################################################################
# sort() Change sort order
L = ['abc', 'ABD', 'aBe']

print()
# ######################################################################################################################
# Sorting built-in
L = ['abc', 'ABD', 'aBe']

print()
# ######################################################################################################################
# Add many items at end
L = [1, 2]

print()
# ######################################################################################################################
# Delete and return last item
L = [1, 2, 3, 4, 5]

print()
# ######################################################################################################################
# In-place reversal method
L = [1, 2, 3, 4, 5]

print()
# ######################################################################################################################
#  Index of an object
L = ['spam', 'eggs', 'ham']

print()
# ######################################################################################################################
# Insert at position
L = ['spam', 'eggs', 'ham']

print()
# ######################################################################################################################
# Delete by value
L = ['spam', 'eggs', 'ham']

print()
# ######################################################################################################################
# Delete by position
L = ['spam', 'eggs', 'ham']

print()
# ######################################################################################################################
# Delete one item
L = ['spam', 'eggs', 'ham']

print()
# ######################################################################################################################
# Delete an entire section
L = ['spam', 'eggs', 'ham']
L = ['Already', 'got', 'one']

print()
# ######################################################################################################################
# Получение предпоследнего значения
my_list = [5, 7, 9, 1, 1, 2]

print()
# ######################################################################################################################
# Вычисление суммы первого и последнего значений
my_list = [5, 7, 9, 1, 1, 2]

print()
# ######################################################################################################################
# Вывод элементов списка от второго до предпоследнего
my_list = [5, 7, 9, 1, 1, 2]

print()
# ######################################################################################################################
# Выбор каждого второго значения списка, не включая последний элемент
my_list = [5, 7, 9, 1, 1, 2]

print()
# ######################################################################################################################
# Вывод элементов списка от второго (третьего) до предпоследнего с шагом два
my_list = [5, 7, 9, 1, 1, 2]

print()
# ######################################################################################################################
# Вывод всех элементов списка, кроме первого, в обратном порядке
my_list = [1, 2, 3, 4, 5, 7, 8, 9]

print()
# ######################################################################################################################
# Вывод элементов списка от второго (третьего) значения до конца списка
my_list = [5, 7, 9, 1, 1, 2]

print()
# ######################################################################################################################
# Вывод всех элементов списка от начала до предпоследнего элемента
my_list = [5, 7, 9, 1, 1, 2]

print()
# ######################################################################################################################
# Вывод всех элементов списка в обратном порядке
my_list = [1, 2, 3, 4, 5, 7, 8, 9]
