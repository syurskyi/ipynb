#!/usr/bin/python
# -*- coding: utf-8 -*-

# Строка-разделитель выводиться не будет
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, __)

# print()
# ######################################################################################################################
# Нестандартная строка-разделитель
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, __ _)

# print()
# ######################################################################################################################
# Подавление вывода символа конца строки
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, ___)

# print()
# ######################################################################################################################
# Вывод двух строк в одной строке
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, _ _ _)
# print(_, _, )

# print()
# ######################################################################################################################
# Нестандартный разделитель строк
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, __'..._')

# print()
# ######################################################################################################################
# Несколько именованных аргументов
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, __ ..., _ !__)

# print()
# ######################################################################################################################
# Порядок не имеет значения
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, __ !_ , __ ...)

# print()
# ######################################################################################################################
# Вывод в файл
x = 'spam'
y = 99
z = ['eggs']
# print(_, _, _, __ ..., _=_(data.txt ___)

# print()
# ######################################################################################################################
# Вывод содержимого текстового файла
x = 'spam'
y = 99
z = ['eggs']
# print(_(data.txt)._____

# print()
# ######################################################################################################################
# Сохранить для последующего восстановления
# import
x = 'spam'
y = 99
z = ['eggs']
# # # Перенаправить вывод в файл
# temp
# _._ =
# # # Выведет в файл, а не на экран
# print('spam')
# print(1, 2, 3)
# # # Вытолкнуть буферы на диск
# # # Восстановить первоначальный поток
# _._._
# _._
# # # Результаты более ранних обращений
# print('back here')
# print(_('log.txt').____

# print()
# ######################################################################################################################
# В версии 3.0 именованный аргумент file позволяет перенаправить в файл вывод единственного вызова функции print,
# не прибегая к переустановке значения sys.stdout.
# import
x = 'spam'
y = 99
z = ['eggs']
# # 3.0
# log
# # # Вывести в объект, напоминающий файл
# print(_, _, _, _ = _)
# # # Вывести в оригинальный поток вывода
# print(_, _, _)

# print()
# ######################################################################################################################
# Эти способы перенаправления удобно использовать, когда в одной и той же программе необходимо организовать
# вывод и в файл, и в стандартный поток вывода. Однако если вы собираетесь использовать эти формы вывода,
# вам потребуется создать объект-файл (или объект, который имеет метод write, как и объект
# файла) и передавать инструкции этот объект, а не строку с именем файла:

# import
x = 'spam'
y = 99
z = ['eggs']

log = None
# print(1, 2, 3, _=_)
# print(4, 5, 6, _=_)
# _._
# print(7, 8, 9)
# print(_('log.txt').____

# print()
# ######################################################################################################################
# Эти расширенные формы инструкции print нередко используются для вывода сообщений об ошибках в стандартный
# поток ошибок, sys.stderr. Вы можете либо использовать его метод write и форматировать выводимые строки вручную,
# либо использовать синтаксис перенаправления:
# import
# _._._(('Bad!' * 8) + '_')
# print('Bad!' * 8, _=_._)

# print()
# ######################################################################################################################
# вывод текста обоими способами в версии 3.0,
# перенаправление вывода во внешний файл и выполняется проверка содержимого текстовых файлов:
X = 1
Y = 2
# # # Вывод: простой способ
# print(_, _)
# # # Вывод: сложный способ
# import
# _._._(_(_) + _ _ + _(_) + '__')
# # # Перенаправление в файл
# print(_, _, _=_(temp1 _)
# # # Запись в файл
# _(temp2 _ _ _)._(_(_) + _ _ + _(_) + '__')
# # # Двоичный режим
# print(_(temp1 _ __ _).____
