#!/usr/bin/python
# -*- coding: utf-8 -*-

# if
# Basic Examples

# print('true')


# print('true')

# print('false')

# print()
# ######################################################################################################################
# if
# Multiway Branching
# killer rabbit
x = 'killer rabbit'
# roger
# print('How is Jessica')
# bugs
# print('What is up Doc?')

# print('Run away! Run away')

# print()
# ######################################################################################################################
# if
# Multiway Branching
# choice

choice = 'ham'
# print({'spam':  1.25,
#        'ham':   1.99,
#        'eggs':  0.99,
#        'bacon': 1.10}[choice])

#
# print(1.25)

# print(1.99)

# print(0.99)

# print(1.10)

# print('Bad choice')

# print()
# ######################################################################################################################
# if
# Handling switch defaults

branch = {'spam': 1.25,
          'ham': 1.99,
          'eggs': 0.99}

# print(branch.get('spam', 'Bad choice'))
# print(branch.get('bacon', 'Bad choice'))

choice = 'bacon'
# choice
# print(___)

# print('Bad choice')

# print()
# ######################################################################################################################
# if
# Parity check

# x _ _ "Введите число: "

# print(_ " - четное число")

# print(_ " - нечетное число")
# input()

# x "Введите число: "

# print(x _)
# print("- четное число")

# print(x _)
# print("- нечетное число")
# input()

# print()
# ######################################################################################################################
# if
# Check several conditions

# print("""Какой операционной системой вы пользуетесь?
# 1 — Windows 8
# 2 — Windows 7
# 3 — Windows Vista
# 4 — Windows XP
# 5 — Другая""")
# os "Введите число, соответствующее ответу: "

# print("Вы выбрали: Windows 8")

# print("Вы выбрали: Windows 7")

# print("Вы выбрали: Windows Vista")

# print("Вы выбрали: Windows XP")

# print("Вы выбрали: другая")

# print("Вы не ввели число")

# print("Мы не смогли определить вашу операционную систему")
# input()

# print()
# ######################################################################################################################
# if
# Enclosed instructions

# print("""Какой операционной системой вы пользуетесь?
# 1 — Windows 8
# 2 — Windows 7
# 3 — Windows Vista
# 4 — Windows XP
# 5 — Другая""")
# os ("Введите число, соответствующее ответу: ")


# print("Вы выбрали: Windows 8")

# print("Вы выбрали: Windows 7")

# print("Вы выбрали: Windows Vista")

# print("Вы выбрали: Windows XP")

# print("Вы выбрали: другая")

# print("Мы не смогли определить вашу операционную систему")

# print("Вы не ввели число")
# input()

# print()
# ######################################################################################################################
# Оператор if ... else имеет еще один формат:
# <Переменная> = <Если истина> if <Условие> else <Если ложь>
# print("Yes" if 10 % 2 == 0 else "No")
# Yes
# s = "Yes" if 10 % 2 == 0 else "No"
# s
# 'Yes'
# s = "Yes" if 11 % 2 == 0 else "No"
# s
# 'No'

# print()
# ######################################################################################################################
# if
# 'friend' example
friend = "Rolf"
# user_name "Enter your name: "

# print("Hello, friend!")

# print("Hello, stranger!")

# print()
# ######################################################################################################################
# if
# Using the `in` keyword
friends = ["Rolf", "Bob", "Anne"]
family = ["Jen", "Charlie"]

# user_name "Enter your name: "


# print("Hello, friend!")

# print("Hello, family!")

# print("I don't know you.")

# print()
# ######################################################################################################################
# simple-if
# x 'x = '
# Если число x больше пяти, то будет выдано
# соответствующее сообщение
# x > 5
# print('x больше пяти')

# print()
# ######################################################################################################################
# if else
# x 'x = '
# x > 0
# y = x ** 0.5

# y = x ** 2
# print(y)

# print()
# ######################################################################################################################
# nested-if-else
# x 'x = '

# 0 < x < 7
# print('Значение x входит в заданный диапазон, продолжаем')
# y = 2 * x - 5
# y < 0:
# print('Значение y отрицательно')

# y > 0
# print('Значение y положительно')

# print('y = 0')

# print()
# ######################################################################################################################
# nested-if-else-with-elif
# x 'x = '
# Заменим второй вложенный if в предыдущем примере
# на оператор ветвления с несколькими условиями
# 0 < x < 7
# print('Значение x входит в заданный диапазон, продолжаем')
# y = 2 * x - 5
# y < 0:
# print('Значение y отрицательно')
# y > 0:
# print('Значение y положительно')

# print('y = 0')

# print()
# ######################################################################################################################
# elif-switch
# print('''Меню:
#       1. Файл
#       2. Вид
#       3. Выход
# ''')

# choice 'Ваш выбор: '

# print('Вы выбрали пункт меню "Файл"')

# print('Вы открыли меню "Вид"')

# print('Завершение.')

# print('Некорректный выбор')

# print()
# ######################################################################################################################
# if
# no-conditional-expression
is_ready = True

# Присваиваем значение переменной в зависимости от условия

# 'Ready'

# 'Not ready yet'

# print(state_msg)

# print()
# ######################################################################################################################
# if
# conditional-expression
is_ready = True

# То же самое, что и в предыдущем примере, но используем
# условное выражение вместо условного оператора
# state_msg = 'Ready' ____ 'Not ready yet'
# print(state_msg)

# print()
# ######################################################################################################################
# if
# truth-value-testing
# string 'Enter a string: '
# то же самое, что if string is not None and string != ''

# print('The string is {}')

# number input('Enter a number: '

# print('Число не равно нулю')

# print('Число равно нулю')

# print()
# ######################################################################################################################
# While
# General Format
x = 'spam'
# x
# print(x _)
# x

# print()

a = 0
b = 10
# a < b:
# print(a _)
# a
# print()
# ######################################################################################################################
# While continue
# odd or even
x = 10
# x
# x
# Or, x -= 1
# Odd? -- skip print
# print(x _)
print()
x = 10
# x
# x
# x
# print(_ , __)

# print()
# ######################################################################################################################
# while break

# name 'Enter name:'
# name

# age 'Enter age: '
# print('Hello', _, '=>', _ ** 2)

# print()
# ######################################################################################################################
# While Loop else
# x = y // 2   # For some y > 1

# x > 1:
# Remainder
# print(_ 'has factor' _)
# Skip else

# Normal exit
# print(_ 'is prime')


# While - More on the loop else
# Check source here is something wrong


# print()
# ######################################################################################################################
# While List items listed
arr = [1, 2, 3]
i, count = 0, len(arr)

# print(arr)  # Результат выполнения: [2, 4, 6]

# print()
# ######################################################################################################################
# While
# Ending a loop with user input
# "Do you wish to run the program? (yes/no): "

# user_input
# print("We're running!")
# "Do you wish to run the program? (yes/no): "

# print("We stopped running.")

# print()
# ######################################################################################################################
# while simple example
n = 1  # вначале n равно единице
# пока оно меньше или равно десяти
# print('n =' _)  # выводим текущее значение n
# и увеличиваем его на 1


# While
# повторять, пока x не будет положительным
x = 0
# повторять, пока x не будет положительным
# 'Введите положительное число: '
# print('Вы ввели число')

# print()
# ######################################################################################################################
# While
# using break with бесконечный цикл
name = None  # вначале мы не знаем имени пользователя

# бесконечный цикл

# print('Меню:')
# print('1. Ввести имя')
# print('2. Вывести приветствие')
# print('3. Выйти')
# response, 'Выберите пункт: '

# print()

# name, 'Введите ваше имя: '

# здороваемся с пользователем, если имя уже введено
# print('Привет, ', _, '!', _)

# print('Я не знаю вашего имени.')

# оператор break завершает выполнение цикла
# если пользователь выбрал третий пункт, то выходим из цикла

# print('Неверный ввод.')

# print()


# print()
# ######################################################################################################################
# While break
#  более простой пример

# print('Введите exit, чтобы завершить цикл')
# response,'> '

# print()
# ######################################################################################################################
# While continue
x = 0
# x < 10:

# пропускаем число 5

# print('Текущее число равно')

# print()
# ######################################################################################################################
# while-else
x = 5
# пока x не равен нулю


# print('Цикл выполнен')
# print('Конечное значение x:')

# print()
# ######################################################################################################################
# while-else-break

x = 3
# цикл будет повторен три раза, если пользователь не завершит его ранее

# response, 'Введите stop, чтобы остановить цикл (иначе что угодно): ')
# эта ветка будет выполенена только если цикл не был прерван
# print('Цикл завершился сам')
# print('Конец программы')

# print()
# ######################################################################################################################
# for
# General Format
# "spam", "eggs", "ham"
# print(_, __)

sum = 0
# [1, 2, 3, 4]
# sum
# print(sum)

prod = 1
# item 1, 2, 3, 4]
# prod
# print(prod)

# print()
# ######################################################################################################################
# for
# Other data types
S = "lumberjack"
T = ("and", "I'm", "okay")
# # #  Iterate over a string
# x
# print(_, _)
# # # Iterate over a tuple
# x
# print(_, _)

# # # Iterate over a os
import os

# print(dir(os))

# os_dir =
# print(os_dir)
# x
# print(x)

# print()
# ######################################################################################################################
# for
# Tuple assignment
T = [(1, 2), (3, 4), (5, 6)]
# a, b
# print(a, b)

# print()
# ######################################################################################################################
# for
# Use dict keys iterator and index
D = {'a': 1, 'b': 2, 'c': 3}
# key in D:
# print(_ '=>' _)

# print(l_(D._()))

# print()
# ######################################################################################################################
# for
# Iterate over both keys and values
D = {'a': 1, 'b': 2, 'c': 3}
# key value
# print(_ '=>' _)

# print()
# ######################################################################################################################
# for
# Manual assignment equivalent
# Need to check something wrong is here
T = [(1, 2), (3, 4), (5, 6)]
# both

# print(a, b)

# print()
# ######################################################################################################################
# автоматического распаковывания вложенных структур в цикле for
((a, b), c) = ((1, 2), 3)
# [((1, 2), 3), ((4, 5), 6)]: print(a, b, c)
# [([1, 2], 3), ['XY', 6]]: print(a, b, c)

#  extended sequence assignment in for loops
# Tuple assignment
# extended sequence assignment in for loops
#  Used in for loop
a, b, c = (1, 2, 3)
# [(1, 2, 3), (4, 5, 6)]
# print(a, b, c)

# print()
# ######################################################################################################################
#  extended sequence assignment in for loops
#  Extended seq assignment
# a, *b, c = (1, 2, 3, 4)
# print(a, b, c)
# for loop
# a *b c [(1, 2, 3, 4), (5, 6, 7, 8)
# print(a, b, c)

# print()
# ######################################################################################################################
# Nested for loops
# Имея список объектов (items) и список ключей (tests),
# этот фрагмент пытается отыскать каждый ключ в списке объектов и сообщает о результатах поиска
# 2 options

items = ["aaa", 111, (4, 5), 2.01]  # A set of objects
tests = [(4, 5), 3.14]  # Keys to search for

# key     # For all keys
# item    # For all items
# Check for match
# print(_ "was found")


# print(_"not found!")

# key     # For all keys
# key     # Let Python check for a match
# print(_ "was found")

# print(_, "not found!")

# print()
# ######################################################################################################################
# цикла for решает типичную задачу обработки данных – выборку одинаковых элементов из двух последовательностей
seq1 = "spam"
seq2 = "scam"
res = []  # Start empty
# x       # Scan first sequence
# x       # Common item?
# Add to result end
# print(_)

# for
# Enumeration of letters in a word
# "str":
# print(_, _)

# print("\nЦикл выполнен")

# print()
# ######################################################################################################################
# for
# Enumeration of dictionary elements.
arr = {"x": 1, "y": 2, "z": 3}
# print(_._()) # Использование метода keys()

# key :  # Использование метода keys()
# print(_, _)

# key :  # Словари также поддерживают итерации
# print(_, _)
#
arr = {"x": 1, "y": 2, "z": 3}
# key    #  сортировать
# print(_, _)

# print()
# ######################################################################################################################
# for
# Enumeration of elements of the list of tuples
arr = [(1, 2), (3, 4)]  # Список кортежей
# a, b
# print(_, _)
# print()

# print()
# ######################################################################################################################
# number of vowels
sentence = "now is the time for all good people to come to the aid"
count = 0
# letter
# 'a' 'e' 'i' 'u' 'o':

print("The number of vowels is ")

# print()
# ######################################################################################################################
# Repeating something 10 times
elements = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# index
# print()

# print()
# ######################################################################################################################
# for
# Using each value while you iterate

students = [
    {"name": "Rolf", "grade": 90},
    {"name": "Bob", "grade": 78},
    {"name": "Jen", "grade": 100},
    {"name": "Anne", "grade": 80},
]
# student  # student is a variable used for iteration
# name
# grade
# print(" _ has a grade of _.")

# print()
# ######################################################################################################################
# Destructuring in a loop
friends = [("Rolf", 25), ("Anne", 37), ("Charlie", 31), ("Bob", 22)]
# name age
# print('_ is _ years old')

# print()
# ######################################################################################################################
# for
# i принимает значения в диапазоне [0, 10)
# i range(10)
# print('i =' _)
# print()
# i принимает значения в диапазоне [5, 10)
# i range(5 10)
# print('i =' _)
# print()
# i принимает значения в диапазоне [5, 10) с шагом 2
# i range(5 10 2)
# print('i =' _)


# print()
# ######################################################################################################################
# for-else, using range
# i, 3  # # цикл будет повторен три раза, если пользователь не завершит его ранее
# responce, 'Enter stop to stop the loop (else whatever): ')



# print('The cycle ended itself')  # эта ветка будет выполенена только если цикл не был прерван
# print('End of program')
# print()

# print()
# ######################################################################################################################
# for-continue
# i range(1 11)
# # #  пропускаем число 5

# print('The current number is')

# print()
# ######################################################################################################################
# nested-loops
# i range(10)
# j range(30)
# print('*')
# print()

# print()
# ######################################################################################################################
# The range () and enumerate () functions
arr = [1, 2, 3]

# print()
# ######################################################################################################################
# Example of using the range () function
arr = [1, 2, 3]

# (1 101): print(i, ...)

# (100 0 -1): print(i, ...)

# (2, 101, 2): print(i, ...)

# print()
# ######################################################################################################################
#  An example of using the enumerate () function
arr = [1, 2, 3, 4, 5, 6]
# elem
# print(arr)

# print()
# ######################################################################################################################
# Enumerate a List
# You can iterate over the index and value of an item in a list by using a basic for loop
L = ['apples', 'bananas', 'oranges']
# idx val
# print("index is ... and value is ... ")

# print()
# ######################################################################################################################
# Enumerate a Tuple
# Enumerating a tuple isn’t at all different from enumerating a list.
t = ('apples', 'bananas', 'oranges')
# idx, val
# print("index is ... and value is ...")

# print()
# ######################################################################################################################
# ######################################################################################################################
# Enumerate a List of Tuples (The Neat Way)
# Say you have a list of tuples where each tuple is a name-age pair.
# With tuple unpacking, we can do something like this
L = [('Matt', 20), ('Karim', 30), ('Maya', 40)]
# idx val
# name
# age
# print "index is __, name is __, and age is __"

# print()
# ######################################################################################################################
# Enumerate a String
str = "Python"
# idx, ch
# print("index is _ and character is _")

# print()
# ######################################################################################################################
# Enumerate with a Different Starting Index
L = ['apples', 'bananas', 'oranges']
# idx, s
# print "index is _ and value is _"
